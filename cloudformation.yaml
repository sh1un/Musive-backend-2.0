AWSTemplateFormatVersion: '2010-09-09'
Description: Setup EC2 instance with Next.js and Node.js, RDS PostgreSQL, and IAM User with Administrator Access

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  AMIId:
    Type: String
    Default: ami-0cf2b4e024cdb6960 # Replace with a valid AMI ID
    Description: AMI ID for the EC2 instance
  IAMUserName:
    Type: String
    Default: workshopuser
    Description: Name of the IAM user to create for workshop participants
  IAMUserPassword:
    Type: String
    NoEcho: true
    Description: Password for the IAM user (at least 8 characters, including uppercase, lowercase, number, and special character) For example, Workshop!123

Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIId
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > /var/log/user-data.log 2>&1
          set -o xtrace

          # Avoid interactive prompts
          export DEBIAN_FRONTEND=noninteractive

          apt update -y
          apt-get dist-upgrade -y --exclude=linux-image-*
          apt install -y curl git


          # Switch to ubuntu user and execute the following commands
          sudo -i -u ubuntu bash << 'EOF'

          # Install PostgreSQL client
          sudo apt install -y postgresql-client-16

          # Install NVM
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

          # Add NVM to bashrc
          echo 'export NVM_DIR="$HOME/.nvm"' >> /home/ubuntu/.bashrc
          echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /home/ubuntu/.bashrc
          echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> /home/ubuntu/.bashrc
          
          # Source bashrc to load NVM
          source /home/ubuntu/.bashrc
          
          # Install Node.js 20
          nvm install 20
          nvm use 20
          
          # Install PM2
          npm install -g pm2

          # Clone and set up Next.js application
          cd /home/ubuntu
          git clone https://github.com/sh1un/Nextjs-Musive-app.git
          cd Nextjs-Musive-app
          npm install
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          export MUSIVE_API_URL="http://$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4):4444/api"
          npm run build
          pm2 start npm --name nextjs-app -- start -- -p 3000

          # Clone and set up backend application
          cd /home/ubuntu
          git clone https://github.com/sh1un/Musive-backend-2.0.git
          cd Musive-backend-2.0
          export DB_URL="postgres://postgres:1234567890@${MyDBInstance.Endpoint.Address}:5432/musive"
          export TOKENKEY="shiun0413"
          export PORT="4444"
          npm install
          pm2 start npm --name musive-backend -- start
          EOF
      Tags:
        - Key: Name
          Value: musive-app

  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref IAMUserName
      LoginProfile:
        Password: !Ref IAMUserPassword
        PasswordResetRequired: false

  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AdminAccessPolicy
      Users:
        - !Ref IAMUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP, HTTPS and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4444
          ToPort: 4444
          CidrIp: 0.0.0.0/0

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS DB Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: musive
      Engine: postgres
      EngineVersion: '16.3'
      MasterUsername: postgres
      MasterUserPassword: 1234567890
      VPCSecurityGroups:
        - !GetAtt MyDBSecurityGroup.GroupId
      PubliclyAccessible: true
    DependsOn: MyDBSecurityGroup

Outputs:
  AWSAccountId:
    Description: AWS Account ID
    Value: !Sub "${AWS::AccountId}"
  IAMUserName:
    Description: IAM user name
    Value: !Ref IAMUserName
  IAMUserAccessKey:
    Description: Access key for the IAM user
    Value: !Ref IAMUserAccessKey
  IAMUserSecretKey:
    Description: Secret key for the IAM user
    Value: !GetAtt IAMUserAccessKey.SecretAccessKey
  InstanceId:
    Description: The InstanceId of the newly created EC2 instance
    Value: !Ref MyEC2Instance
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
  RDSEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address
  RDSHostPort:
    Description: The port of the RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Port